//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/ReplyFailure.java
//
//  Created by retechretech.
//

#include "IOSClass.h"
#include "com/goodow/realtime/channel/ReplyFailure.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

BOOL GDCReplyFailureEnum_initialized = NO;

GDCReplyFailureEnum *GDCReplyFailureEnum_values[3];

@implementation GDCReplyFailureEnum

+ (GDCReplyFailureEnum *)TIMEOUT {
  return GDCReplyFailureEnum_TIMEOUT;
}
+ (GDCReplyFailureEnum *)NO_HANDLERS {
  return GDCReplyFailureEnum_NO_HANDLERS;
}
+ (GDCReplyFailureEnum *)RECIPIENT_FAILURE {
  return GDCReplyFailureEnum_RECIPIENT_FAILURE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (GDCReplyFailureEnum *)fromIntWithInt:(int)i {
  switch (i) {
    case 0:
    return GDCReplyFailureEnum_TIMEOUT;
    case 1:
    return GDCReplyFailureEnum_NO_HANDLERS;
    case 2:
    return GDCReplyFailureEnum_RECIPIENT_FAILURE;
    default:
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid index %d", i]];
  }
}

- (int)toInt {
  switch ([self ordinal]) {
    case GDCReplyFailure_TIMEOUT:
    return 0;
    case GDCReplyFailure_NO_HANDLERS:
    return 1;
    case GDCReplyFailure_RECIPIENT_FAILURE:
    return 2;
    default:
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"How did we get here?"];
  }
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [GDCReplyFailureEnum class]) {
    GDCReplyFailureEnum_TIMEOUT = [[GDCReplyFailureEnum alloc] initWithNSString:@"TIMEOUT" withInt:0];
    GDCReplyFailureEnum_NO_HANDLERS = [[GDCReplyFailureEnum alloc] initWithNSString:@"NO_HANDLERS" withInt:1];
    GDCReplyFailureEnum_RECIPIENT_FAILURE = [[GDCReplyFailureEnum alloc] initWithNSString:@"RECIPIENT_FAILURE" withInt:2];
    GDCReplyFailureEnum_initialized = YES;
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithObjects:GDCReplyFailureEnum_values count:3 type:[IOSClass classWithClass:[GDCReplyFailureEnum class]]];
}

+ (GDCReplyFailureEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < 3; i++) {
    GDCReplyFailureEnum *e = GDCReplyFailureEnum_values[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromIntWithInt:", "fromInt", "Lcom.goodow.realtime.channel.ReplyFailure;", 0x9, NULL },
    { "toInt", NULL, "I", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const char *superclass_type_args[] = {"Lcom.goodow.realtime.channel.ReplyFailure;"};
  static J2ObjcClassInfo _GDCReplyFailureEnum = { "ReplyFailure", "com.goodow.realtime.channel", NULL, 0x4011, 3, methods, 0, NULL, 1, superclass_type_args};
  return &_GDCReplyFailureEnum;
}

@end
